/**
 * The `DeferredPromise` has a `promise` property in an initially pending state,
 * that will be resolved when the `done` method is called or rejected when the
 * `fail` method is called.
 */
export interface DeferredPromise<RESOLVES = any, REJECTS extends Error = Error> {
    done(result: RESOLVES): void;
    fail(error: REJECTS): void;
    readonly status: DeferredPromiseStatus;
    readonly fulfilled: boolean;
    promise: Promise<RESOLVES>;
}
/**
 * The three states the DeferredPromise can be in - initially pending then either
 * resolved or rejected when it is fulfilled.
 */
export declare type DeferredPromiseStatus = 'pending' | 'resolved' | 'rejected';
/**
 * Creates a new `DeferredPromise`
 */
export declare function deferred<T = any, E extends Error = Error>(): DeferredPromise<T, E>;
export default deferred;
